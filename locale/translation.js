// Translation document for the collection
// =======================================
// This file contains the texts
// annotated for translation
//
// Instructions:
// 1. Open the PO file with Poedit
// 2. Press "Update" to update from sources

gettext('DAC');
gettext('Generators');
gettext('Utils');
gettext('pdm-dac-8-bits');
gettext('Pulse-density modulated 1-bit DAC. Input: 8-bit samples');
gettext('Biestable de datos (Tipo D). Cuando se recibe un tic por load se captura el dato');
gettext('Sumador  de 8 bits, con acarreo');
gettext('Registro del sistema de 8 bits');
gettext('Accumulator');
gettext('Add the incoming sample  \nto the accumulator');
gettext('Incoming sample');
gettext('Accumulator overflow  \ncarry set (MSB)');
gettext('Pulse-density modulated  \noutput signal');
gettext('# Pulse-density modulated Digital to Analog Converter  \n\n');
gettext('## Credits\n\nThis module has been ported from the [Tiny-synth project](https://github.com/gundy/tiny-synth)  \ndeveloped by [Gundy](https://github.com/gundy)\n');
gettext('pdm-dac');
gettext('Pulse-density modulated 1-bit DAC');
gettext('Registro de 12 bits');
gettext('Sumador de dos operandos de 12 bits');
gettext('Separador de bus de 13-bits en uno de 1bit y otro de 12bits');
gettext('# Pulse-density modulated Digital to Analog Converter  \n\n* Pulse-density modulated DAC\n \n This module drives a digital output at an average level equivalent  \n to the data-in (din) value.  It can be filtered to an analog output  \n using a low-pass filter (eg. an RC filter).  \n\n* Principle of operation:\n\nThis works by repeatedly adding the input (din) value to an accumulator of the  \nsame width, and setting the output to \"1\" if the accumulator overflows.  \nThe remainder after overflow is left in the accumulator for the next cycle, \nand has the effect of averaging out any errors.  \n\n(The accumulator has to be an extra bit wider than data-in to accomodate  \nthe overflow (output) bit).  \n');
gettext('tone-noise');
gettext('tone-noise generator');
gettext('Detector de flanco de subida. Emite un tic cuando detecta un flanco ascendente');
gettext('Extract 1 bit from a 24-bits bus');
gettext('23 bits shift register (left)');
gettext('Extract 1 bit from a 23-bits bus');
gettext('Puerta XOR');
gettext('Agregador de 8 cables de 1-bit a bus de 8-bits');
gettext('Valor constante 0 para bus de 4 bits');
gettext('Valor genérico constante, de 4 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Join an 8-bit bus and a 4-bit bus into a 12-bits bus');
gettext('tone-pulse');
gettext('Generate a squeare signal (pulse) from the timebase');
gettext('12-bits Channel enable gate');
gettext('Join 11 wires into a 11-bits bus');
gettext('Separador de bus de 12-bits en 12 cables');
gettext('Puerta AND');
gettext('split a 24-bit bus into 1 wire and a 23-bits bus');
gettext('In the first half phase the output is 0,  \nin the second half phase the output is the amplitude  ');
gettext('The sample is 12 bits  \nOnly the 8 MSB is used for the  \namplitude. The 4 lsb are 0');
gettext('tone-saw');
gettext('tone-saw generator');
gettext('Separador de bus de 24-bits en dos buses de 12 y 12 bits');
gettext('tone-triangle');
gettext('tone-triangle generator');
gettext('Split a 23-bit bus into one of 11-bits and another of 12-bits');
gettext('11-bits bus not gate');
gettext('11 bits, 2-1 Multiplexer');
gettext('Join an 11-bits bus and a 1-bit bus into a 12-bits bus');
gettext('Un bit constante a 0');
gettext('Channel-enable');
gettext('Heart-1Mhz');
gettext('Componente genérico');
gettext('Split the 26bits into 1 bits an a 25-bits bus');
gettext('Calculate a new constant value dividing k1 / k2');
gettext('26-bits accumulator');
gettext('24-bits system register');
gettext('24-bits adder with two operands');
gettext('**System clock in MHZ**  \nThis parameters should containt  \nyou board's clock frequency (in Mhz)');
gettext('## 1MHZ Heart');
gettext('Constant value:  \nk = Full_scale / Sys_clock');
gettext('Accumulator: The value is incremented by  \nthe k constant on every system clock');
gettext('The output is a tic');
gettext('01-tone-pulse-two-amps');
gettext('Valor genérico constante, de 16 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Valor genérico constante, de 8 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Multiplexor de 2 a 1 de 8 bits');
gettext('Bombear 1 bit con el periodo especificado en el parámetro (en ms). Por defecto el periodo es de 100 ms');
gettext('24-bits accumulator');
gettext('Adder for two operands of 24 and 16 bits. Result in 24 bits');
gettext('Agregador de 2 buses de 8-bits y 16 a uno de 24-bits');
gettext('Valor constante 0 para bus de 8 bits');
gettext('Sumador de dos operandos de 24bits');
gettext('Registro de 24 bits');
gettext('Insert here your system clock  \nIt depends on your board');
gettext('1Mhz clk signal  \nIndependent of your board');
gettext('This value is calcutaled  \nby means of this formula:  \n\nTone_freq = 2^24 * ft(hz)/1000000  \n\nWhere ft is the tone frequency in Hz\n\nC4 --> 261.63Hz --> 4389');
gettext('Generator phase');
gettext('Tone generator: Pulse');
gettext('Digital to Analog  \nconverter');
gettext('Pulse amplitude  \n* 0xFF: Maximum volume\n* 0x01: Minimal volume');
gettext('The pulse's amplitude is changed  \nperiodically');
gettext('Tone generator: timebase');
gettext('Show the amplitude  \nin the leds');
gettext('02-tone-saw-pulse');
gettext('24-bits 2-1 multiplexer');
gettext('Split the 12-bit bus into a 8-bits bus and a 4-bits bus');
gettext('Tone generator: saw');
gettext('03-tone-pulse-triangle');
gettext('04-tone-triang-noise');
gettext('05-tonex4-test');
gettext('8-bits 4-1 multiplexer');
gettext('Contador básico, de 2 bits');
gettext('Corazón de bombeo de tics a con periodo paramétrico de milisegundos');
gettext('**Contador básico**');
gettext('**Valor inicial**');
gettext('**Incremento**');
gettext('06-playing-samples-hola');
gettext('Contador módulo M, ascendente, de 13 bits, con reset ');
gettext('Biestable con entradas de Set y Reset síncronas, para poner y quitar notaficaciones de eventos');
gettext('8KB ROM memory (synchronous)');
gettext('Corazón de bombeo de tics a un frecuencia parametrica en Hz');
gettext('Detección de pulsación. Emite un tic cada vez que se aprieta el pulsador');
gettext('ROM Memory with audio samples:  \nunsigned 8-bit PCM  ');
gettext('Counter for reading the   \nROM memory');
gettext('sample');
gettext('Sampling frequency');
gettext('All the samples has been  \nread');
gettext('Working state:  \n0: idle  \n1: Playing samples');
gettext('Start button:  \nWhen press the samples  \nare played');
gettext('# Playing samples  \n\nThe ROM memory contains the audio samples of the  \nword \"Hola\". When the button is pressed,  \nthe samples are played');
gettext('**Parámetro**: Módulo del contador');
gettext('**Pulsador-tic**');
